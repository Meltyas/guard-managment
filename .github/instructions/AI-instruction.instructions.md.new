---
applyTo: '**'
---

# AI Assistant Context: Guard Management Module

## 📋 Project Overview

**Guard Management** is a **Foundry VTT V13 module** designed for the **Foundryborne system (Daggerheart)** to manage guard operations in campaigns. The module handles comprehensive guard management including statistics, patrols, resources, reputation, and temporary effects with full synchronization between GM and Players.

---

## 🔧 Technical Stack

| Technology | Version | Purpose |
|------------|---------|---------|
| **TypeScript** | Latest | Type-safe JavaScript development |
| **Vite** | Latest | Fast build tool and development server |
| **Vitest** | Latest | Fast unit testing framework |
| **Foundry VTT** | V13 | Target platform |
| **Node.js** | 20.11.0 | Required version (managed via nvm) |

========================
CODE SNIPPETS
========================
TITLE: JavaScript Examples: Creating Foundry VTT Documents
DESCRIPTION: Provides practical JavaScript examples demonstrating how to use the `Item.implementation.create` method to create new Document instances. Examples cover creating world-level items, actor-owned items, and items within a compendium pack.

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.documents.NoteDocument

LANGUAGE: JavaScript
CODE:
```
const data = [{name: "Special Sword", type: "weapon"}];
const created = await Item.implementation.create(data);
```

LANGUAGE: JavaScript
CODE:
```
const data = [{name: "Special Sword", type: "weapon"}];
const actor = game.actors.getName("My Hero");
const created = await Item.implementation.create(data, {parent: actor});
```

LANGUAGE: JavaScript
CODE:
```
const data = [{name: "Special Sword", type: "weapon"}];
const created = await Item.implementation.create(data, {pack: "mymodule.mypack"});
```

----------------------------------------

TITLE: JavaScript: Examples for createDocuments Method
DESCRIPTION: Practical JavaScript examples demonstrating the usage of the `createDocuments` static method for various scenarios, including creating single, multiple, embedded, and compendium documents.

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.documents.AmbientLightDocument

LANGUAGE: JavaScript
CODE:
```
const data = [{name: "New Actor", type: "character", img: "path/to/profile.jpg"}];
const created = await Actor.implementation.createDocuments(data);
```

LANGUAGE: JavaScript
CODE:
```
const data = [{name: "Tim", type: "npc"}, {name: "Tom", type: "npc"}];
const created = await Actor.implementation.createDocuments(data);
```

LANGUAGE: JavaScript
CODE:
```
const actor = game.actors.getName("Tim");
const data = [{name: "Sword", type: "weapon"}, {name: "Breastplate", type: "equipment"}];
const created = await Item.implementation.createDocuments(data, {parent: actor});
```

LANGUAGE: JavaScript
CODE:
```
const data = [{name: "Compendium Actor", type: "character", img: "path/to/profile.jpg"}];
const created = await Actor.implementation.createDocuments(data, {pack: "mymodule.mypack"});
```

----------------------------------------

TITLE: JavaScript: Examples for createDocuments Method
DESCRIPTION: Provides various JavaScript examples demonstrating the usage of the `createDocuments` method for different scenarios, including creating single, multiple, embedded, and compendium documents.

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.documents.CombatantGroup

LANGUAGE: JavaScript
CODE:
```
const data = [{name: "New Actor", type: "character", img: "path/to/profile.jpg"}];
const created = await Actor.implementation.createDocuments(data);
```

LANGUAGE: JavaScript
CODE:
```
const data = [{name: "Tim", type: "npc"}, {name: "Tom", type: "npc"}];
const created = await Actor.implementation.createDocuments(data);
```

LANGUAGE: JavaScript
CODE:
```
const actor = game.actors.getName("Tim");
const data = [{name: "Sword", type: "weapon"}, {name: "Breastplate", type: "equipment"}];
const created = await Item.implementation.createDocuments(data, {parent: actor});
```

LANGUAGE: JavaScript
CODE:
```
const data = [{name: "Compendium Actor", type: "character", img: "path/to/profile.jpg"}];
const created = await Actor.implementation.createDocuments(data, {pack: "mymodule.mypack"});
```

----------------------------------------

TITLE: Tour start Method
DESCRIPTION: Start the Tour at its current step, or at the beginning if the tour has not yet been started.

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.nue.Tour

LANGUAGE: APIDOC
CODE:
```
start(): Promise<any>
  Returns: Promise<any>
```

----------------------------------------

TITLE: Foundry VTT SetupTour Class API Reference
DESCRIPTION: Comprehensive API documentation for the `SetupTour` class, detailing its inheritance, how to construct it, its various properties (both instance and static), accessors for computed values, and the methods available for controlling tour progression and UI interaction. This class is designed to manage the user interface state during the setup process.

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.nue.tours.SetupTour

LANGUAGE: APIDOC
CODE:
```
Class SetupTour
  Description: A Tour subclass that handles controlling the UI state of the Setup screen
  Hierarchy: Tour -> SetupTour

  Constructors:
    constructor(
      config: TourConfig,
      options?: { id?: string; namespace?: string }
    ): SetupTour
      Description: Construct a Tour by providing a configuration.
      Parameters:
        config: TourConfig
          Description: The configuration of the Tour
        options?: { id?: string; namespace?: string } (Optional)
          Description: Additional options for configuring the tour
          Properties:
            id?: string (Optional)
              Description: A tour ID that supercedes TourConfig#id
            namespace?: string (Optional)
              Description: A tour namespace that supercedes TourConfig#namespace
      Returns: SetupTour
      Inherited from: Tour.constructor

  Properties:
    config: TourConfig
      Description: Configuration of the tour. This object is cloned to avoid mutating the original configuration.
      Inherited from: Tour.config
    fadeElement: HTMLElement
      Description: The HTMLElement that fades out the rest of the screen
      Inherited from: Tour.fadeElement
    focusedApp: Application
      Description: Stores a currently open Application for future steps
    overlayElement: any
      Description: The HTMLElement that blocks input while a Tour is active
      Inherited from: Tour.overlayElement
    targetElement: HTMLElement
      Description: The HTMLElement which is the focus of the current tour step.
      Inherited from: Tour.targetElement
    HIGHLIGHT_PADDING: number = 10 (Static)
      Description: Padding around a Highlighted Element
      Inherited from: Tour.HIGHLIGHT_PADDING

  Accessors:
    get canStart(): boolean
      Description: Overrides Tour.canStart

  Methods:
    _preStep()
    _reloadProgress()
    complete()
    exit()
    next()
    previous()
    progress()
    reset()
    start()
    _getTargetElement()
    _postStep()
    _renderStep()
    fromJSON()
    onMovementAction()
```

----------------------------------------

TITLE: Get Collection Name Examples
DESCRIPTION: Examples demonstrating the usage of `Actor.implementation.getCollectionName` to retrieve collection names, either by passing an existing collection name or a document name.

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.documents.DrawingDocument

LANGUAGE: JavaScript
CODE:
```
Actor.implementation.getCollectionName("items");
// returns "items"
```

LANGUAGE: JavaScript
CODE:
```
Actor.implementation.getCollectionName("Item");
// returns "items"
```

----------------------------------------

TITLE: JavaScript: Examples for Static create Method
DESCRIPTION: Provides practical JavaScript examples demonstrating how to use the `create` static method to instantiate and save different types of documents. Examples include creating a world-level item, an actor-owned item, and an item within a compendium pack.

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.documents.User

LANGUAGE: JavaScript
CODE:
```
// Example: Create a World-level Item
const data = [{name: "Special Sword", type: "weapon"}];
const created = await Item.implementation.create(data);
```

LANGUAGE: JavaScript
CODE:
```
// Example: Create an Actor-owned Item
const data = [{name: "Special Sword", type: "weapon"}];
const actor = game.actors.getName("My Hero");
const created = await Item.implementation.create(data, {parent: actor});
```

LANGUAGE: JavaScript
CODE:
```
// Example: Create an Item in a Compendium pack
const data = [{name: "Special Sword", type: "weapon"}];
const created = await Item.implementation.create(data, {pack: "mymodule.mypack"});
```

----------------------------------------

TITLE: JavaScript: Get Collection Name Examples
DESCRIPTION: Examples demonstrating the usage of the `Actor.implementation.getCollectionName` method to retrieve collection names, both by passing an existing collection name and a document name.

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.documents.Setting

LANGUAGE: JavaScript
CODE:
```
Actor.implementation.getCollectionName("items");
// returns "items"
```

LANGUAGE: JavaScript
CODE:
```
Actor.implementation.getCollectionName("Item");
// returns "items"
```

----------------------------------------

TITLE: Foundry VTT Tour Class API Reference
DESCRIPTION: Comprehensive API documentation for the `Tour` class, outlining all its public, protected, static, and abstract properties and methods, along with their signatures, descriptions, parameters, and return types.

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.nue.tours.SetupTour

LANGUAGE: APIDOC
CODE:
```
class: Tour
  Properties:
    - name: currentStep
      type: getter
      return_type: null | [TourStep](../interfaces/foundry.TourStep.html)
      description: Return the current Step, or null if the tour has not yet started.
      inherited_from: Tour.currentStep
    - name: description
      type: getter
      return_type: string
      description: The human-readable description of the tour.
      inherited_from: Tour.description
    - name: hasNext
      type: getter
      return_type: boolean
      description: Returns True if there is a next TourStep
      inherited_from: Tour.hasNext
    - name: hasPrevious
      type: getter
      return_type: boolean
      description: Returns True if there is a previous TourStep
      inherited_from: Tour.hasPrevious
    - name: id
      type: getter
      return_type: string
      description: The unique identifier of the tour.
      inherited_from: Tour.id
    - name: key
      type: getter
      return_type: string
      description: The key the Tour is stored under in game.tours, of the form `${namespace}.${id}`
      inherited_from: Tour.key
    - name: namespace
      type: getter
      return_type: string
      description: The package namespace for the tour.
      inherited_from: Tour.namespace
    - name: status
      type: getter
      return_type: [TourStatus](../types/foundry.TourStatus.html)
      description: The current status of the Tour
      inherited_from: Tour.status
    - name: stepIndex
      type: getter
      return_type: null | number
      description: The index of the current step; -1 if the tour has not yet started, or null if the tour is finished.
      inherited_from: Tour.stepIndex
    - name: steps
      type: getter
      return_type: [TourStep](../interfaces/foundry.TourStep.html)[]
      overrides: Tour.steps
    - name: title
      type: getter
      return_type: string
      description: The human-readable title for the tour.
      inherited_from: Tour.title
    - name: activeTour
      type: static getter
      return_type: null | [Tour](foundry.nue.Tour.html)
      description: Returns the active Tour, if any
      inherited_from: Tour.activeTour
    - name: tourInProgress
      type: static getter
      return_type: boolean
      description: Indicates if a Tour is currently in progress.
      inherited_from: Tour.tourInProgress
  Methods:
    - name: _preStep
      type: method
      return_type: Promise<void>
      overrides: [Tour](foundry.nue.Tour.html).[_preStep](foundry.nue.Tour.html#_prestep)
    - name: _reloadProgress
      type: internal method
      return_type: void
      description: Reloads the Tour's current step from the saved progress
      inherited_from: [Tour](foundry.nue.Tour.html).[_reloadProgress](foundry.nue.Tour.html#_reloadprogress)
    - name: complete
      type: method
      return_type: Promise<any>
      description: Advance the tour to a completed state.
      inherited_from: [Tour](foundry.nue.Tour.html).[complete](foundry.nue.Tour.html#complete)
    - name: exit
      type: method
      return_type: void
      description: Exit the tour at the current step.
      inherited_from: [Tour](foundry.nue.Tour.html).[exit](foundry.nue.Tour.html#exit)
    - name: next
      type: method
      return_type: Promise<any>
      description: Progress the Tour to the next step.
      inherited_from: [Tour](foundry.nue.Tour.html).[next](foundry.nue.Tour.html#next)
    - name: previous
      type: method
      return_type: Promise<any>
      description: Rewind the Tour to the previous step.
      inherited_from: [Tour](foundry.nue.Tour.html).[previous](foundry.nue.Tour.html#previous)
    - name: progress
      type: method
      parameters:
        - name: stepIndex
          type: number
          description: The step to progress to
      return_type: Promise<any>
      description: Progresses to a given Step
      inherited_from: [Tour](foundry.nue.Tour.html).[progress](foundry.nue.Tour.html#progress)
    - name: reset
      type: method
      return_type: Promise<any>
      description: Reset the Tour to an un-started state.
      inherited_from: [Tour](foundry.nue.Tour.html).[reset](foundry.nue.Tour.html#reset)
    - name: start
      type: method
      return_type: Promise<any>
      description: Start the Tour at its current step, or at the beginning if the tour has not yet been started.
      inherited_from: [Tour](foundry.nue.Tour.html).[start](foundry.nue.Tour.html#start)
    - name: _getTargetElement
      type: protected method
      parameters:
        - name: selector
          type: string
          description: A CSS selector
      return_type: null | Element
      description: Query the DOM for the target element using the provided selector
      inherited_from: [Tour](foundry.nue.Tour.html).[_getTargetElement](foundry.nue.Tour.html#_gettargetelement)
    - name: _postStep
      type: protected abstract method
      return_type: Promise<void>
      description: Clean-up operations performed after a step is completed.
      inherited_from: [Tour](foundry.nue.Tour.html).[_postStep](foundry.nue.Tour.html#_poststep)
```

----------------------------------------

TITLE: _initializeApplicationOptions API Documentation
DESCRIPTION: No description

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.applications.sidebar.apps.Compendium

LANGUAGE: APIDOC
CODE:
```
_initializeApplicationOptions(options: any): any

Parameters:
  options: any

Returns:
  any

Overrides: DocumentDirectory._initializeApplicationOptions
```

----------------------------------------

TITLE: JavaScript Example: Filter Collection entries
DESCRIPTION: Demonstrates how to use the `filter` method on a Collection instance to select entries based on a custom condition. This example filters for entries where the value starts with 'A'.

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.documents.collections.Playlists

LANGUAGE: JavaScript
CODE:
```
let c = new Collection([["a", "AA"], ["b", "AB"], ["c", "CC"]]);
let hasA = c.filters(entry => entry.slice(0) === "A");
```

----------------------------------------

TITLE: JavaScript: Get Collection Name Examples
DESCRIPTION: Illustrates how to use the `getCollectionName` method in JavaScript, showing examples for passing an existing collection name and a document name to retrieve the appropriate collection identifier.

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.documents.Card

LANGUAGE: JavaScript
CODE:
```
Actor.implementation.getCollectionName("items");
// returns "items"
```

LANGUAGE: JavaScript
CODE:
```
Actor.implementation.getCollectionName("Item");
// returns "items"
```

----------------------------------------

TITLE: Get requiresManualInstall property
DESCRIPTION: Indicates whether this generation requires manual installation.

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.config.ReleaseData

LANGUAGE: APIDOC
CODE:
```
get requiresManualInstall(): boolean
Returns: boolean
```

----------------------------------------

TITLE: API Method: _initializeApplicationOptions
DESCRIPTION: Inherited from DocumentDirectory._initializeApplicationOptions.

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.applications.sidebar.tabs.PlaylistDirectory

LANGUAGE: APIDOC
CODE:
```
_initializeApplicationOptions(options: any): any
Parameters:
  options: any
Returns: any
Inherit Doc
Inherited from DocumentDirectory._initializeApplicationOptions
```

----------------------------------------

TITLE: JavaScript Examples: Creating Documents
DESCRIPTION: Illustrative JavaScript examples demonstrating various use cases for the `createDocuments` method, including creating single, multiple, embedded, and compendium documents.

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.documents.BasePlaylistSound

LANGUAGE: JavaScript
CODE:
```
const data = [{name: "New Actor", type: "character", img: "path/to/profile.jpg"}];
const created = await Actor.implementation.createDocuments(data);
```

LANGUAGE: JavaScript
CODE:
```
const data = [{name: "Tim", type: "npc"], [{name: "Tom", type: "npc"}];
const created = await Actor.implementation.createDocuments(data);
```

LANGUAGE: JavaScript
CODE:
```
const actor = game.actors.getName("Tim");
const data = [{name: "Sword", type: "weapon"}, {name: "Breastplate", type: "equipment"}];
const created = await Item.implementation.createDocuments(data, {parent: actor});
```

LANGUAGE: JavaScript
CODE:
```
const data = [{name: "Compendium Actor", type: "character", img: "path/to/profile.jpg"}];
const created = await Actor.implementation.createDocuments(data, {pack: "mymodule.mypack"});
```

----------------------------------------

TITLE: JavaScript Example: Get an element from Collection by key
DESCRIPTION: Demonstrates how to use the `get` method on a Collection instance to retrieve elements by key, including cases for existing keys, non-existing keys, and strict mode.

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.nue.ToursCollection

LANGUAGE: JavaScript
CODE:
```
let c = new Collection([["a", "Alfred"], ["b", "Bob"], ["c", "Cynthia"]]);
c.get("a"); // "Alfred"
c.get("d"); // undefined
c.get("d", {strict: true}); // throws Error
```

----------------------------------------

TITLE: _initializeApplicationOptions Method
DESCRIPTION: Documents the `_initializeApplicationOptions` method, which initializes application options and is inherited from `DocumentDirectory`. This method is crucial for setting up the application's initial state.

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.applications.sidebar.tabs.MacroDirectory

LANGUAGE: APIDOC
CODE:
```
_initializeApplicationOptions(options: any): any
  Parameters:
    options: any
  Returns: any
  Inherited from DocumentDirectory._initializeApplicationOptions
```

----------------------------------------

TITLE: Initialize Handlebars extensions and helpers (APIDOC)
DESCRIPTION: Documents the `initialize` function within the `foundry.applications.handlebars` module. This function is responsible for setting up Handlebars extensions and helpers. It takes no parameters and returns void.

SOURCE: https://foundryvtt.com/api/v13/functions/foundry.applications.handlebars.initialize

LANGUAGE: APIDOC
CODE:
```
Function initialize
initialize(): void
  Initialize Handlebars extensions and helpers.
  Returns void
```

----------------------------------------

TITLE: JavaScript: Get Embedded Collection Name Examples
DESCRIPTION: Examples demonstrating how to use the `getCollectionName` static method to retrieve the name of an embedded collection, showing both existing collection names and document names as input.

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.ClientDocument

LANGUAGE: JavaScript
CODE:
```
Actor.implementation.getCollectionName("items");
// returns "items"
```

LANGUAGE: JavaScript
CODE:
```
Actor.implementation.getCollectionName("Item");
// returns "items"
```

----------------------------------------

TITLE: JavaScript: Examples for updateDocuments Method
DESCRIPTION: Provides various JavaScript examples demonstrating how to use the `updateDocuments` method. Examples include updating a single document, multiple documents, embedded documents within a parent, and documents within a Compendium pack.

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.documents.AmbientSoundDocument

LANGUAGE: JavaScript
CODE:
```
const updates = [{_id: "12ekjf43kj2312ds", name: "Timothy"}];
const updated = await Actor.implementation.updateDocuments(updates);
```

LANGUAGE: JavaScript
CODE:
```
const updates = [{_id: "12ekjf43kj2312ds", name: "Timothy"}, {_id: "kj549dk48k34jk34", name: "Thomas"}]};
const updated = await Actor.implementation.updateDocuments(updates);
```

LANGUAGE: JavaScript
CODE:
```
const actor = game.actors.getName("Timothy");
const updates = [{_id: sword.id, name: "Magic Sword"}, {_id: shield.id, name: "Magic Shield"}];
const updated = await Item.implementation.updateDocuments(updates, {parent: actor});
```

LANGUAGE: JavaScript
CODE:
```
const actor = await pack.getDocument(documentId);
const updated = await Actor.implementation.updateDocuments([{_id: actor.id, name: "New Name"}],
  {pack: "mymodule.mypack"});
```

----------------------------------------

TITLE: Get Static documentName Property
DESCRIPTION: The canonical name of this Document type, for example "Actor".

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.documents.JournalEntryCategory

LANGUAGE: APIDOC
CODE:
```
get documentName(): string
```

----------------------------------------

TITLE: API Method: _initializeApplicationOptions
DESCRIPTION: Documents the `_initializeApplicationOptions` method, responsible for initializing application options. It accepts an 'options' parameter and returns 'any'. This method is inherited from `HandlebarsApplicationMixin(DocumentSheetV2)`.

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.applications.sheets.TileConfig

LANGUAGE: APIDOC
CODE:
```
_initializeApplicationOptions(options: any):
  Parameters:
    options: any
  Returns: any
  Inherited from: HandlebarsApplicationMixin(DocumentSheetV2)._initializeApplicationOptions
```

----------------------------------------

TITLE: JavaScript: Examples for Static create Method
DESCRIPTION: Provides JavaScript examples demonstrating how to use the `create` static method to instantiate and persist various types of documents, including World-level Items, Actor-owned Items, and Items within a Compendium pack.

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.documents.JournalEntryPage

LANGUAGE: JavaScript
CODE:
```
const data = [{name: "Special Sword", type: "weapon"}];
const created = await Item.implementation.create(data);
```

LANGUAGE: JavaScript
CODE:
```
const data = [{name: "Special Sword", type: "weapon"}];
const actor = game.actors.getName("My Hero");
const created = await Item.implementation.create(data, {parent: actor});
```

LANGUAGE: JavaScript
CODE:
```
const data = [{name: "Special Sword", type: "weapon"}];
const created = await Item.implementation.create(data, {pack: "mymodule.mypack"});
```

----------------------------------------

TITLE: Set Up Game State
DESCRIPTION: Fully sets up the game state, initializing Documents, UI applications, and the Canvas. This method triggers the hookEvents.setup and hookEvents.ready events.

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.Game

LANGUAGE: APIDOC
CODE:
```
setupGame(): Promise<void>
  Description: Fully set up the game state, initializing Documents, UI applications, and the Canvas. Triggers the hookEvents.setup and hookEvents.ready events.
  Returns: Promise<void>
```

----------------------------------------

TITLE: Get documentName: Get the canonical document type name
DESCRIPTION: Retrieves the canonical name of this Document type, for example "Actor". This static getter provides a standardized identifier for the document's class.

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.documents.Item

LANGUAGE: APIDOC
CODE:
```
get documentName(): string

Returns: string
```

----------------------------------------

TITLE: JavaScript: Examples for Updating Documents
DESCRIPTION: Provides various JavaScript examples demonstrating how to use the `updateDocuments` static method. Examples include updating a single document, multiple documents, embedded documents within a parent, and documents within a Compendium pack.

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.documents.PlaylistSound

LANGUAGE: JavaScript
CODE:
```
const updates = [{_id: "12ekjf43kj2312ds", name: "Timothy"}];
const updated = await Actor.implementation.updateDocuments(updates);
```

LANGUAGE: JavaScript
CODE:
```
const updates = [{_id: "12ekjf43kj2312ds", name: "Timothy"}, {_id: "kj549dk48k34jk34", name: "Thomas"}]};
const updated = await Actor.implementation.updateDocuments(updates);
```

LANGUAGE: JavaScript
CODE:
```
const actor = game.actors.getName("Timothy");
const updates = [{_id: sword.id, name: "Magic Sword"}, {_id: shield.id, name: "Magic Shield"}];
const updated = await Item.implementation.updateDocuments(updates, {parent: actor});
```

LANGUAGE: JavaScript
CODE:
```
const actor = await pack.getDocument(documentId);
const updated = await Actor.implementation.updateDocuments([{_id: actor.id, name: "New Name"}],
  {pack: "mymodule.mypack"});
```

----------------------------------------

TITLE: API Method: initialize
DESCRIPTION: One-time initialization actions that should be performed for this client implementation. This will be called only once when the Game object is first set-up.

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.av.AVClient

LANGUAGE: APIDOC
CODE:
```
initialize(): Promise<void>
  Returns Promise<void>
```

----------------------------------------

TITLE: Example: Get Element from Collection by Name in JavaScript
DESCRIPTION: This JavaScript code snippet demonstrates how to use the 'getName' method on a Collection. It shows examples of successful retrieval, undefined return for non-existent names, and error throwing in strict mode.

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.documents.collections.CompendiumCollection

LANGUAGE: JavaScript
CODE:
```
let c = new Collection([["a", "Alfred"], ["b", "Bob"], ["c", "Cynthia"]]);
c.getName("Alfred"); // "Alfred"
c.getName("D"); // undefined
c.getName("D", {strict: true}); // throws Error
```

----------------------------------------

TITLE: JavaScript: Get Collection Name (Document Name)
DESCRIPTION: Example demonstrating how to use `getCollectionName` with a document name.

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.documents.BaseFolder

LANGUAGE: javascript
CODE:
```
Actor.implementation.getCollectionName("Item");
// returns "items"
```

----------------------------------------

TITLE: _configure Protected Method API Documentation
DESCRIPTION: Documents the `_configure` protected method, which prepares the data model instance before validation and initialization. It accepts optional configuration options. This method is inherited from BasePackage.

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.packages.BaseSystem

LANGUAGE: APIDOC
CODE:
```
_configure:
  Access: Protected
  Signature: _configure(options?: object): void
  Description: Configure the data model instance before validation and initialization workflows are performed.
  Parameters:
    options: object = {} (Optional) - Additional options modifying the configuration
  Returns: void
  Inherited From: BasePackage._configure
```

----------------------------------------

TITLE: JavaScript: Get Collection Name (Existing)
DESCRIPTION: Example demonstrating how to use `getCollectionName` with an existing collection name.

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.documents.BaseFolder

LANGUAGE: javascript
CODE:
```
Actor.implementation.getCollectionName("items");
// returns "items"
```

----------------------------------------

TITLE: APIDOC: _initializeApplicationOptions
DESCRIPTION: Initializes application options. This method is inherited from `HandlebarsApplicationMixin(DocumentSheetV2)`.

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.applications.sheets.WallConfig

LANGUAGE: APIDOC
CODE:
```
_initializeApplicationOptions(options: any): any
  Parameters:
    options: any
  Returns: any
  Inheritance: Inherited from HandlebarsApplicationMixin(DocumentSheetV2)._initializeApplicationOptions
```

----------------------------------------

TITLE: Get Static Actor documentName Property
DESCRIPTION: The canonical name of this Document type, for example "Actor".

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.documents.Actor

LANGUAGE: APIDOC
CODE:
```
static get documentName(): string
Inherited From: ClientDocumentMixin(BaseActor).documentName
```

----------------------------------------

TITLE: APIDOC: Method create
DESCRIPTION: Create a Sound instance for a given audio source URL. Requires SoundCreationOptions.

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.audio.AudioHelper

LANGUAGE: APIDOC
CODE:
```
create(options: SoundCreationOptions): Sound
  Parameters:
    options: SoundCreationOptions - Sound creation options
  Returns: Sound
```

----------------------------------------

TITLE: Get Static documentName Property
DESCRIPTION: Retrieves the canonical name of this Document type, for example 'Actor'. This is a static property inherited from ClientDocumentMixin(BaseActiveEffect).

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.documents.ActiveEffect

LANGUAGE: APIDOC
CODE:
```
get documentName(): string
  Returns: string
  Inherited from: ClientDocumentMixin(BaseActiveEffect).documentName
```

----------------------------------------

TITLE: Initialize WebRTC Implementation
DESCRIPTION: Initializes the WebRTC implementation for the game.

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.Game

LANGUAGE: APIDOC
CODE:
```
initializeRTC(): Promise<boolean>
  Description: Initialize the WebRTC implementation
  Returns: Promise<boolean>
```

----------------------------------------

TITLE: Get Grid Offset Range API and Example (Foundry VTT Grid)
DESCRIPTION: Determines the smallest range of grid offsets that encompasses all grid spaces intersecting the specified bounds. An example demonstrates iterating through this range to process grid offsets.

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.grid.BaseGrid

LANGUAGE: APIDOC
CODE:
```
getOffsetRange(bounds: Rectangle): [i0: number, j0: number, i1: number, j1: number]
  Description: Returns the smallest possible range containing the offsets of all grid spaces that intersect the given bounds. If the bounds are empty (nonpositive width or height), then the offset range is empty.
  Parameters:
    bounds: Rectangle - The bounds
  Returns: [i0: number, j0: number, i1: number, j1: number] - The offset range
```

LANGUAGE: JavaScript
CODE:
```
const [i0, j0, i1, j1] = grid.getOffsetRange(bounds);
for ( let i = i0; i < i1; i++ ) {
  for ( let j = j0; j < j1; j++ ) {
    const offset = {i, j};
    // ...
  }
}
```

----------------------------------------

TITLE: JavaScript: Document.create Method Usage Examples
DESCRIPTION: Practical JavaScript examples demonstrating how to use the `Document.create` static method. These examples cover creating world-level items, actor-owned items, and items within a compendium pack.

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.documents.BaseCards

LANGUAGE: JavaScript
CODE:
```
const data = [{name: "Special Sword", type: "weapon"}];
const created = await Item.implementation.create(data);
```

LANGUAGE: JavaScript
CODE:
```
const data = [{name: "Special Sword", type: "weapon"}];
const actor = game.actors.getName("My Hero");
const created = await Item.implementation.create(data, {parent: actor});
```

LANGUAGE: JavaScript
CODE:
```
const data = [{name: "Special Sword", type: "weapon"}];
const created = await Item.implementation.create(data, {pack: "mymodule.mypack"});
```

----------------------------------------

TITLE: JavaScript Example: Get an element from Collection by name
DESCRIPTION: Demonstrates how to use the `getName` method on a Collection instance to retrieve elements by name. It shows examples of retrieving an existing element, attempting to retrieve a non-existing element (which returns undefined), and using the `strict` option to throw an error for a non-existent element.

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.documents.collections.WorldSettings

LANGUAGE: JavaScript
CODE:
```
let c = new Collection([["a", "Alfred"], ["b", "Bob"], ["c", "Cynthia"]]);
c.getName("Alfred"); // "Alfred"
c.getName("D"); // undefined
c.getName("D", {strict: true}); // throws Error
```

----------------------------------------

TITLE: _initializationOrder API Documentation
DESCRIPTION: No description provided.

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.documents.Adventure

LANGUAGE: APIDOC
CODE:
```
Static _initializationOrder(): Generator<any[], void, unknown>

Description: No description provided.

Parameters: []

Returns: Generator<any[], void, unknown>

Inherited From: [BaseAdventure](foundry.documents.BaseAdventure.html).[_initializationOrder](foundry.documents.BaseAdventure.html#_initializationorder)
```

----------------------------------------

TITLE: _initializeApplicationOptions method documentation
DESCRIPTION: Initializes application options, returning an ApplicationConfiguration object.

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.applications.sidebar.tabs.ChatLog

LANGUAGE: APIDOC
CODE:
```
Method: _initializeApplicationOptions
Signature: _initializeApplicationOptions(options: any): ApplicationConfiguration
Description: Initializes application options.

Parameters:
  options: any

Returns: ApplicationConfiguration
```

----------------------------------------

TITLE: Get Collection Name: Existing Collection
DESCRIPTION: Example demonstrating how to use `getCollectionName` by passing an existing collection name, which returns the same name.

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.documents.WallDocument

LANGUAGE: JavaScript
CODE:
```
Actor.implementation.getCollectionName("items");
// returns "items"
```

----------------------------------------

TITLE: ClientPackage Class API Reference
DESCRIPTION: Comprehensive API documentation for the `ClientPackage` class, detailing its inheritance, constructor signature, and a list of all properties, accessors, and methods. Specific details are provided for the `constructor`, `_source`, and `availability` members.

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.ClientPackage

LANGUAGE: APIDOC
CODE:
```
Class ClientPackage
  Description: The ClientDocument extends the BasePackage class by adding client-specific behaviors to all Package types.
  Hierarchy: Base -> ClientPackage

  Constructors:
    constructor(data: PackageManifestData, options?: object)
      Parameters:
        data: PackageManifestData - Source data for the package
        options: object (Optional, default: {}) - Options which affect DataModel construction
      Returns: ClientPackage

  Properties:
    _source: PackageManifestData - The source data object for this DataModel instance. Once constructed, the source object is sealed such that no keys may be added nor removed.
    availability: number - An availability code in PACKAGE_AVAILABILITY_CODES which defines whether this package can be used.
    exclusive: (type not specified)
    favorite: (type not specified)
    hasStorage: (type not specified)
    locked: (type not specified)
    owned: (type not specified)
    parent: (type not specified)
    tags: (type not specified)
    _schema: (type not specified)
    LOCALIZATION_PREFIXES: (type not specified)
    type: (type not specified)

  Accessors:
    incompatibleWithCoreVersion: (type not specified)
    invalid: (type not specified)
    schema: (type not specified)
    type: (type not specified)
    unavailable: (type not specified)
    validationFailures: (type not specified)
    collection: (type not specified)
    schema: (type not specified)

  Methods:
    _testRequiredDependencies()
    _testSupportedSystems()
    clone()
    getVersionBadge()
    install()
    reset()
    toJSON()
    toObject()
    uninstall()
    updateSource()
    validate()
    _configure()
    _initialize()
    _initializeSource()
    _logWarning()
    _migratePackIDs()
    _migrateStyles()
    cleanData()
    defineSchema()
    fromJSON()
    fromRemoteManifest()
    fromSource()
    get()
    getVersionBadge()
    isIncompatibleWithCoreVersion()
    migrateData()
    migrateDataSafe()
    shimData()
    testAvailability()
    testDependencyCompatibility()
    uninstall()
    validateId()
    validateJoint()
    validateVersion()
    _formatBadDependenciesTooltip()
    _formatIncompatibleSystemsTooltip()
    _initializationOrder()
```

----------------------------------------

TITLE: Get Collection Name: Document Name
DESCRIPTION: Example demonstrating how to use `getCollectionName` by passing a document name, which returns the corresponding collection name.

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.documents.WallDocument

LANGUAGE: JavaScript
CODE:
```
Actor.implementation.getCollectionName("Item");
// returns "items"
```

----------------------------------------

TITLE: Get static documentName property (APIDOC)
DESCRIPTION: Returns the canonical name of this Document type, for example 'Actor'. Inherited from ClientDocumentMixin(BasePlaylistSound).documentName.

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.documents.PlaylistSound

LANGUAGE: APIDOC
CODE:
```
static get documentName(): string
// Returns: string - The canonical name of this Document type, for example "Actor".
```

----------------------------------------

TITLE: API Documentation for _initialize method (Foundry VTT Document)
DESCRIPTION: Documents the protected `_initialize` method, which initializes the instance by copying data from the source object to instance attributes. This method mirrors the workflow of `SchemaField#initialize` but includes additional functionality. It accepts an optional `options` object and returns `void`.

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.documents.BaseUser

LANGUAGE: APIDOC
CODE:
```
Method: _initialize
  Access: Protected
  Signature: _initialize(options?: object): void
  Description: Initialize the instance by copying data from the source object to instance attributes. This mirrors the workflow of SchemaField#initialize but with some added functionality.
  Parameters:
    options:
      Type: object
      Optional: true
      Default: {}
      Description: Options provided to the model constructor
  Returns: void
  Inherited From: Document._initialize
```

----------------------------------------

TITLE: Get documentName Static Property
DESCRIPTION: Retrieves the canonical name of this Document type, for example "Actor". This property is inherited from CanvasDocumentMixin(BaseAmbientSound).

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.documents.AmbientSoundDocument

LANGUAGE: APIDOC
CODE:
```
documentName: string
  Returns: string
  Inherited from: CanvasDocumentMixin(BaseAmbientSound).documentName
```

----------------------------------------

TITLE: Foundry VTT API: Static create method signature and parameters
DESCRIPTION: Detailed API documentation for the `create` static method, including its parameters, return types, and a general overview of its functionality for creating new Document instances.

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.documents.BaseAmbientLight

LANGUAGE: APIDOC
CODE:
```
Static create(
    data?: object | Document<object, DocumentConstructionContext> | (object | Document<object, DocumentConstructionContext>)[],
    operation?: Partial<Omit<DatabaseCreateOperation, "data">>
): Promise<undefined | Document<object, DocumentConstructionContext> | Document<object, DocumentConstructionContext>[]>

Parameters:
- data: object | Document<object, DocumentConstructionContext> | (object | Document<object, DocumentConstructionContext>)[]
  Description: Initial data used to create this Document, or a Document instance to persist.
- operation: Partial<Omit<DatabaseCreateOperation, "data">> = {}
  Description: Parameters of the creation operation

Returns: Promise<undefined | Document<object, DocumentConstructionContext> | Document<object, DocumentConstructionContext>[]>
  Description: The created Document instance(s)
```

----------------------------------------

TITLE: Install a Package
DESCRIPTION: Adds a package to the local game data once it has been successfully installed. This method is typically called as part of the package installation process.

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.ClientPackage

LANGUAGE: APIDOC
CODE:
```
install(): void
  Returns: void
```

----------------------------------------

TITLE: Get Tour stepIndex Property
DESCRIPTION: The index of the current step; -1 if the tour has not yet started, or null if the tour is finished.

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.nue.Tour

LANGUAGE: APIDOC
CODE:
```
get stepIndex(): null | number
  Returns: null | number
```

----------------------------------------

TITLE: _initializeApplicationOptions Method Documentation
DESCRIPTION: Initializes application options.

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.applications.apps.GridConfig

LANGUAGE: APIDOC
CODE:
```
_initializeApplicationOptions(options: any): any
  Description: Initializes application options.
  Parameters:
    options: any
  Returns: any
  Inherited from: HandlebarsApplicationMixin(DocumentSheetV2)._initializeApplicationOptions
```

----------------------------------------

TITLE: Tour _preStep Method
DESCRIPTION: Set-up operations performed before a step is shown. This is a protected and abstract method.

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.nue.Tour

LANGUAGE: APIDOC
CODE:
```
Protected Abstract _preStep(): Promise<void>
  Returns: Promise<void>
```

----------------------------------------

TITLE: Get Static documentName Property
DESCRIPTION: Retrieves the canonical name of this Document type, for example 'Actor'. This static property is inherited from ClientDocumentMixin(BasePlaylist).

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.documents.Playlist

LANGUAGE: APIDOC
CODE:
```
Static get documentName(): string

Description: The canonical name of this Document type, for example "Actor".
Returns: string
```

----------------------------------------

TITLE: Get Document Static documentName Property
DESCRIPTION: Retrieves the canonical name of this Document type, for example "Actor".

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.abstract.Document

LANGUAGE: APIDOC
CODE:
```
Static documentName: string
  Description: The canonical name of this Document type, for example "Actor".
  Returns: string
```

----------------------------------------

TITLE: Audio/Video Client API Methods
DESCRIPTION: Documentation for core API methods related to managing Audio/Video client connections and responding to settings changes within Foundry Virtual Tabletop.

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.av.AVMaster

LANGUAGE: APIDOC
CODE:
```
disconnect(): Promise<boolean>
  Description: Disconnect from the Audio/Video client.
  Returns: Promise<boolean> - Whether an existing connection was terminated?

onSettingsChanged(changed: object): undefined | Promise<boolean>
  Description: Respond to changes which occur to AV Settings. Changes are handled in descending order of impact.
  Parameters:
    changed: object - The object of changed AV settings
  Returns: undefined | Promise<boolean>

reestablish(): Promise<void>
  Description: Callback actions to take when the user becomes disconnected from the server.
  Returns: Promise<void>
```

----------------------------------------

TITLE: Get Static documentName: Canonical Name of Document Type
DESCRIPTION: The canonical name of this Document type, for example "Actor".

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.documents.NoteDocument

LANGUAGE: APIDOC
CODE:
```
static get documentName(): string
```

----------------------------------------

TITLE: AVClient Interface API Documentation
DESCRIPTION: Comprehensive API reference for the AVClient interface, outlining its role as an audio/video client for broadcasting, including its parameters, hierarchy, properties, accessors, and methods with their signatures and descriptions.

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.av.AVClient

LANGUAGE: APIDOC
CODE:
```
Class AVClient (Interface)
  Description: An interface for an Audio/Video client which is extended to provide broadcasting functionality.
  Parameters:
    - master: The master orchestration instance
    - settings: The audio/video settings being used
  Hierarchy:
    - AVClient
      - SimplePeerAVClient

  Properties:
    - master: AVMaster
      Description: The master orchestration instance
    - settings: AVSettings
      Description: The active audio/video settings being used

  Accessors:
    - get isMuted(): boolean
      Description: Is the current user muted?
    - get isVoiceActivated(): boolean
      Description: Is audio broadcasting voice-activation enabled?
    - get isVoiceAlways(): boolean
      Description: Is audio broadcasting always enabled?
    - get isVoicePTT(): boolean
      Description: Is audio broadcasting push-to-talk enabled?

  Methods:
    - connect(): Promise<boolean>
      Description: Connect to any servers or services needed in order to provide audio/video functionality.
      Returns: Promise<boolean> - Was the connection attempt successful?
    - disconnect(): Promise<boolean>
      Description: Disconnect from any servers or services which are used to provide audio/video functionality.
      Returns: Promise<boolean> - Did a disconnection occur?
    - getAudioSinks(): Promise<{ object: any }>
      Description: Provide an Object of available audio sources which can be used by this implementation.
      Returns: Promise<{ object: any }>
    - getAudioSources(): Promise<{ object: any }>
      Description: Provide an Object of available audio sources which can be used by this implementation.
      Returns: Promise<{ object: any }>
    - getConnectedUsers(): string[]
      Description: Return an array of Foundry User IDs which are currently connected to A/V.
      Returns: string[] - The connected User IDs
    - getLevelsStreamForUser(userId: string): null | MediaStream
      Description: Provide a MediaStream for monitoring a given user's voice volume levels.
      Parameters:
        - userId: string - The User ID.
      Returns: null | MediaStream - The MediaStream for the user, or null if the user does not have one.
    - getMediaStreamForUser(userId: string): null | MediaStream
      Description: Provide a MediaStream instance for a given user ID
      Parameters:
        - userId: string - The User id
      Returns: null | MediaStream - The MediaStream for the user, or null if the user does not have one
```

----------------------------------------

TITLE: Get Static documentName Property
DESCRIPTION: Retrieves the canonical name of this Document type, for example "Actor". This property is inherited from Document.documentName.

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.documents.BaseToken

LANGUAGE: APIDOC
CODE:
```
Static documentName:
  Type: string
  Description: The canonical name of this Document type, for example "Actor".
  Inherited: Document.documentName
```

----------------------------------------

TITLE: JavaScript: Get Collection Name Examples
DESCRIPTION: Demonstrates usage of `Actor.implementation.getCollectionName` with both an existing collection name ('items') and a document name ('Item'), showing how it returns the canonical collection name.

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.documents.BaseRegion

LANGUAGE: JavaScript
CODE:
```
Actor.implementation.getCollectionName("items");
// returns "items"
```

LANGUAGE: JavaScript
CODE:
```
Actor.implementation.getCollectionName("Item");
// returns "items"
```

----------------------------------------

TITLE: _initializationOrder Method Documentation
DESCRIPTION: No description

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.documents.WallDocument

LANGUAGE: APIDOC
CODE:
```
_initializationOrder(): Generator<any[], void, unknown>
  Returns: Generator<any[], void, unknown>
```

----------------------------------------

TITLE: JavaScript: Get Collection Name with Existing Name
DESCRIPTION: Example demonstrating how to use `getCollectionName` by passing an existing collection name, which returns the same name.

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.documents.BaseJournalEntryCategory

LANGUAGE: javascript
CODE:
```
Actor.implementation.getCollectionName("items");
// returns "items"
```

----------------------------------------

TITLE: _prepareContext
DESCRIPTION: Prepares the rendering context for an application, including flags for creating entries and folders, document name, and icons.

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.applications.sidebar.apps.Compendium

LANGUAGE: APIDOC
CODE:
```
_prepareContext(options: any): Promise<ApplicationRenderContext & {
  canCreateEntry: boolean;
  canCreateFolder: boolean;
  documentName: string;
  folderIcon: string;
  sidebarIcon: any;
}>

Parameters:
  - options: any

Returns: Promise<ApplicationRenderContext & {
  canCreateEntry: boolean;
  canCreateFolder: boolean;
  documentName: string;
  folderIcon: string;
  sidebarIcon: any;
}>

Inherited From: DocumentDirectory._prepareContext
```

----------------------------------------

TITLE: Property: options
DESCRIPTION: Application instance configuration options. This property is inherited from DocumentDirectory.options.

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.applications.sidebar.tabs.PlaylistDirectory

LANGUAGE: APIDOC
CODE:
```
options: Readonly<[DocumentDirectoryConfiguration](../types/foundry.DocumentDirectoryConfiguration.html)>
```

----------------------------------------

TITLE: JavaScript: Get Collection Name by Existing Name
DESCRIPTION: Example demonstrating how to use `Actor.implementation.getCollectionName` by passing an existing collection name, which returns the same name.

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.documents.BaseCombatantGroup

LANGUAGE: javascript
CODE:
```
Actor.implementation.getCollectionName("items");
// returns "items"
```

----------------------------------------

TITLE: Get Specific Token Ring Configuration
DESCRIPTION: Shows how to retrieve a previously added custom token ring configuration by its ID from CONFIG.Token.ring. The example then logs a property of the retrieved configuration.

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.canvas.placeables.tokens.TokenRingConfig

LANGUAGE: javascript
CODE:
```
const config = CONFIG.Token.ring.getConfig("myCustomRingId");
console.log(config.spritesheet); // Output: canvas/tokens/myCustomRings.json
```

----------------------------------------

TITLE: Static Method: _initializationOrder
DESCRIPTION: No description available.

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.documents.Macro

LANGUAGE: APIDOC
CODE:
```
Method: _initializationOrder
Signature: _initializationOrder(): Generator<any[], void, unknown>
Description: No description available.
Returns: Generator<any[], void, unknown>
Inherited From: BaseMacro._initializationOrder
```

----------------------------------------

TITLE: JavaScript: Get Collection Name with Document Name
DESCRIPTION: Example demonstrating how to use `getCollectionName` by passing a document name, which returns the corresponding collection name.

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.documents.BaseJournalEntryCategory

LANGUAGE: javascript
CODE:
```
Actor.implementation.getCollectionName("Item");
// returns "items"
```

----------------------------------------

TITLE: API Reference: Static create Method
DESCRIPTION: Detailed API documentation for the `create` static method, including its signature, parameters with types and descriptions, return types, and inheritance information.

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.documents.Playlist

LANGUAGE: APIDOC
CODE:
```
Static create(
  data?:
    | object
    | [Document](foundry.abstract.Document.html)<object, [DocumentConstructionContext](../types/foundry.abstract.types.DocumentConstructionContext.html)>
    | (object | [Document](foundry.abstract.Document.html)<object, [DocumentConstructionContext](../types/foundry.abstract.types.DocumentConstructionContext.html)>)[],
  operation?: Partial<Omit<[DatabaseCreateOperation](../interfaces/foundry.abstract.types.DatabaseCreateOperation.html), "data">>
): Promise<
    | undefined
    | [Document](foundry.abstract.Document.html)<object, [DocumentConstructionContext](../types/foundry.abstract.types.DocumentConstructionContext.html)>
    | [Document](foundry.abstract.Document.html)<object, [DocumentConstructionContext](../types/foundry.abstract.types.DocumentConstructionContext.html)>[]
>

Parameters:
  data (Optional): object | Document<object, DocumentConstructionContext> | (object | Document<object, DocumentConstructionContext>)[]
    Description: Initial data used to create this Document, or a Document instance to persist.
  operation (Optional): Partial<Omit<DatabaseCreateOperation, "data">> = {}
    Description: Parameters of the creation operation

Returns: Promise<undefined | Document<object, DocumentConstructionContext> | Document<object, DocumentConstructionContext>[]>
  Description: The created Document instance(s)

Inherited from: BasePlaylist.create
See: Document.createDocuments
```

----------------------------------------

TITLE: Tour Class: Static fromJSON Method
DESCRIPTION: Creates and returns a Tour instance by loading data from a specified JSON file. This is a static method, allowing direct invocation on the class.

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.nue.tours.SetupTour

LANGUAGE: APIDOC
CODE:
```
fromJSON(filepath: string): Promise<Tour>
  Description: Creates and returns a Tour by loading a JSON file
  Visibility: Static
  Parameters:
    filepath: string - The path to the JSON file
  Returns: Promise<Tour>
  Inherited From: Tour.fromJSON
```

----------------------------------------

TITLE: JavaScript: Get Collection Name by Document Name
DESCRIPTION: Example demonstrating how to use `Actor.implementation.getCollectionName` by passing a document name, which returns the corresponding collection name.

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.documents.BaseCombatantGroup

LANGUAGE: javascript
CODE:
```
Actor.implementation.getCollectionName("Item");
// returns "items"
```

----------------------------------------

TITLE: API: Get an Entry by Name from DocumentCollection
DESCRIPTION: Retrieves an entry from the Collection by its 'name' attribute. This method assumes that objects within the collection possess a 'name' property. An example demonstrates its usage with a sample collection.

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.documents.collections.CompendiumFolderCollection

LANGUAGE: APIDOC
CODE:
```
Method: getName
Signature: getName(name: string, options?: { strict?: boolean }): any
Description: Get an entry from the Collection by name.
Use of this method assumes that the objects stored in the collection have a "name" attribute.
Parameters:
  name: string
    Description: The name of the entry to retrieve.
  options?: { strict?: boolean }
    Description: Additional options that affect how entries are retrieved.
    strict?: boolean
      Description: Throw an Error if the requested name does not exist. Default false.
Returns: any
Inherited From: DocumentCollection.getName
```

LANGUAGE: javascript
CODE:
```
let c = new Collection([["a", "Alfred"], ["b", "Bob"], ["c", "Cynthia"]]);
c.getName("Alfred"); // "Alfred"
c.getName("D"); // undefined
c.getName("D", {strict: true}); // throws Error
```

----------------------------------------

TITLE: _onFirstRender Method
DESCRIPTION: Documents the `_onFirstRender` method, which is called on the first render of the application and is inherited from `DocumentDirectory`. This method is useful for one-time setup tasks that depend on the DOM being ready.

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.applications.sidebar.tabs.MacroDirectory

LANGUAGE: APIDOC
CODE:
```
_onFirstRender(context: any, options: any): Promise<void>
  Parameters:
    context: any
    options: any
  Returns: Promise<void>
  Inherited from DocumentDirectory._onFirstRender
```

----------------------------------------

TITLE: Get DataField Initialization Order in Foundry VTT Schema
DESCRIPTION: Provides a protected static generator that orders the DataFields within the DataSchema into an expected initialization sequence. This method is crucial for ensuring proper data field setup.

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.data.regionBehaviors.ExecuteScriptRegionBehaviorType

LANGUAGE: APIDOC
CODE:
```
_initializationOrder(): Generator<[string, DataField], any, any>
  Modifiers: Protected, Static
  Description: A generator that orders the DataFields in the DataSchema into an expected initialization order.
  Returns: Generator<[string, DataField], any, any>
  Yields:
  Inherited From: RegionBehaviorType._initializationOrder
```

----------------------------------------

TITLE: Get Tracked Attributes for Combat Tracker
DESCRIPTION: This static method retrieves an array of attribute choices that can be tracked for Actors within the Combat Tracker. It can explore a given object or an Actor type for attributes, optionally starting from a specified path.

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.documents.TokenDocument

LANGUAGE: APIDOC
CODE:
```
Static getTrackedAttributes(
  data?: string | object | typeof DataModel | DataModel<object, DataModelConstructionContext> | SchemaField,
  _path?: string[]
): TrackedAttributesDescription
  Get an Array of attribute choices which could be tracked for Actors in the Combat Tracker
  Parameters:
    Optional data: string | object | typeof DataModel | DataModel<object, DataModelConstructionContext> | SchemaField
      The object to explore for attributes, or an Actor type.
    Optional _path: string[] = []
  Returns: TrackedAttributesDescription
```

----------------------------------------

TITLE: APIDOC: Protected Method _configure()
DESCRIPTION: Defines the protected `_configure` method, which performs a one-time initialization upon creation. It takes no parameters and returns void.

SOURCE: https://foundryvtt.com/api/v13/classes/foundry.canvas.rendering.shaders.StarLightColorationShader

LANGUAGE: APIDOC
CODE:
```
_configure(): void
Protected
A one time initialization performed on creation.
Returns void
Inherited from AdaptiveColorationShader._configure
```

---

## 🏗️ Core Architecture

```
🏛️ Guard Organization (base stats + resources + reputation)
    ├── 📦 Resources (organizational level)
    ├── 🤝 Reputation (organizational level)
    ├── ⚡ Guard Modifiers (affect entire organization)
    └── 👥 Patrols (derive from Guard organization stats)
        ├── 🎯 Patrol Effects (specific to patrol)
        ├── 🔧 Custom Modifiers (patrol-specific adjustments)
        └── 👤 Leader (references Actors)

🗄️ GM Storage
    ↓ (templates for)
All Effect Types + Resources + Reputation + Modifiers
```

---

## 🎯 Primary Entities

1. **🏛️ Guard Organization**: Complete guard organization with 4 base stats
   - Robustismo, Analítica, Subterfugio, Elocuencia

2. **👥 Patrols**: Operational units (1-12 members + leader) with derived stats

3. **📦 Resources**: Tracked materials and supplies

4. **🤝 Reputation**: 7-tier relationship system with factions

5. **⚡ Effects**: Temporary modifiers (organizational or patrol-specific)

6. **🗄️ GM Storage**: Centralized template management

---

## 🚀 Development Workflow

### Prerequisites
```bash
# Always use correct Node.js version
nvm use 20.11.0

# Development options
npm run dev          # Hot reload development
npm run build:watch  # Auto-rebuild for Foundry
npm run test:watch   # Tests in watch mode
```

---

## 📝 Task Management Rules

### ✅ Core Requirements

- **Clarity**: Tasks must be clear, specific, and actionable—avoid ambiguity
- **Ownership**: Every task must be assigned a responsible agent, explicitly tagged
- **Atomicity**: Complex tasks must be broken into atomic, trackable subtasks
- **Compatibility**: No task may conflict with or bypass existing validated system behaviour
- **Security Review**: Security-related tasks must undergo mandatory review by a designated reviewer agent
- **Documentation**: Agents must update task status and outcomes in the shared task file
- **Dependencies**: Dependencies between tasks must be explicitly declared
- **Escalation**: Agents must escalate ambiguous, contradictory, or unscoped tasks for clarification

---

## 🔒 Security Compliance Guidelines

### 🚫 Prohibited Practices
- **No Hardcoded Credentials**: Use secure storage mechanisms
- **No eval() Usage**: Avoid eval, unsanitised shell calls, or command injection vectors
- **No Excessive Privileges**: File and process operations must follow principle of least privilege

### ✅ Required Practices
- **Input Validation**: All inputs must be validated, sanitised, and type-checked
- **Secure Logging**: All sensitive operations must be logged, excluding sensitive data values
- **Permission Checks**: Agents must check system-level permissions before accessing protected services

---

## ⚙️ Process Execution Requirements

### 📊 Logging & Monitoring
- **Severity Levels**: Agents must log all actions with appropriate severity (INFO, WARNING, ERROR)
- **Error Reports**: Any failed task must include a clear, human-readable error report
- **Resource Limits**: Agents must respect system resource limits (memory, CPU usage)

### 🔄 Task Management
- **Progress Indicators**: Long-running tasks must expose progress indicators or checkpoints
- **Retry Logic**: Retry logic must include exponential backoff and failure limits

---

## 🎯 Core Operational Principles

### 🚫 Never Do
- Use mock, fallback, or synthetic data in production tasks
- Make assumptions without verifiable evidence
- Perform destructive operations without validation

### ✅ Always Do
- Design error handling logic using test-first principles
- Act based on verifiable evidence, not assumptions
- Validate all preconditions before destructive or high-impact operations
- Ensure all decisions are traceable to logs, data, or configuration files

---

## 🏛️ Design Philosophy Principles

### 🎯 KISS (Keep It Simple, Stupid)
- Solutions must be **straightforward** and **easy to understand**
- **Avoid over-engineering** or unnecessary abstraction
- **Prioritise code readability** and maintainability

### 🎯 YAGNI (You Aren't Gonna Need It)
- **Do not add speculative features** or future-proofing unless explicitly required
- **Focus only on immediate requirements** and deliverables
- **Minimise code bloat** and long-term technical debt

### 🎯 SOLID Principles

| Principle | Description |
|-----------|-------------|
| **S** - Single Responsibility | Each module or function should do **one thing only** |
| **O** - Open-Closed | Software entities should be **open for extension** but **closed for modification** |
| **L** - Liskov Substitution | Derived classes must be **substitutable for their base types** |
| **I** - Interface Segregation | Prefer **many specific interfaces** over one general-purpose interface |
| **D** - Dependency Inversion | Depend on **abstractions**, not concrete implementations |

---

## 🔧 System Extension Guidelines

### 📋 Requirements
- **Interface Compliance**: All new agents must conform to existing interface, logging, and task structures
- **Testing**: Utility functions must be unit tested and peer reviewed before shared use
- **Documentation**: All configuration changes must be reflected in the system manifest with version stamps
- **Compatibility**: New features must maintain backward compatibility unless justified and documented
- **Performance**: All changes must include a performance impact assessment

---

## 🔍 Quality Assurance Procedures

### 🛡️ Review Requirements
- **Security Review**: A reviewer agent must review all changes involving security, system config, or agent roles
- **Documentation Review**: Documentation must be proofread for clarity, consistency, and technical correctness

### 📝 User Experience Standards
- **Clear Messaging**: User-facing output (logs, messages, errors) must be clear, non-technical, and actionable
- **Error Guidance**: All error messages should suggest remediation paths or diagnostic steps
- **Rollback Plans**: All major updates must include a rollback plan or safe revert mechanism

---

## 📊 Implementation Completeness Framework

### 1. 🔍 Mandatory Comparative Analysis
> **When implementing a system following an existing pattern, ALWAYS perform a complete line-by-line audit of the reference system first. List ALL functionalities found before starting implementation.**

### 2. ✅ Mandatory Implementation Checklist
**For each pattern implementation, create and verify this checklist:**

- ✅ **Templates & HTML**
- ✅ **Event handlers**
- ✅ **Drag & Drop functionality**
- ✅ **Dialog integration**
- ✅ **CSS styling**
- ✅ **Manager methods (CRUD)**
- ✅ **Warehouse integration**
- ✅ **Error handling**
- ✅ **Notifications**
- ✅ **Chat integration**
- ✅ **Focus management**
- ✅ **Validation**

### 3. 🔍 Related Files Analysis
> **Before completing an implementation, search ALL files containing the reference system name and analyze what functionalities they implement that might be missing in the new system. Ensure content exists and functions work - don't assume without verification.**

### 4. ✅ Completeness Declaration
> **When finishing any pattern-based implementation, explicitly declare: 'This implementation is COMPLETE and has 1:1 functional parity with [reference system]' only after verifying each checklist point.**

---

## 🧪 TDD Implementation Strategy

### 🔴 Red → 🟢 Green → 🔵 Refactor

1. **🔴 Red**: Write failing tests for functionality
2. **🟢 Green**: Implement minimal working code
3. **🔵 Refactor**: Optimize and clean up

### 🎯 Testing Priorities
- **Unit Tests**: CRUD operations, stat calculations, validation
- **Integration Tests**: Entity relationships, sync operations

---

## 🔄 Synchronization Strategy

### 🛡️ Anti-Death Spiral Design
- **Universal Edit Access**: All users should be able to edit all entities
- **Version Tracking**: Version tracking for all entities
- **Conflict Detection**: Conflict detection and resolution
- **Permission-Based Access**: GM vs Player permissions
- **Real-time Updates**: Real-time updates with DialogV2

### ⚖️ Conflict Resolution Priorities
1. **🔴 GM Override**: GM changes take precedence
2. **⏰ Timestamp**: Most recent change wins
3. **🛠️ Manual Resolution**: DialogV2 intervention for complex conflicts

---

## 🗺️ Key Implementation Notes

| Aspect | Implementation |
|--------|----------------|
| **Entity Relationships** | Guard Organization → Resources/Reputation → Patrols → Effects |
| **Stat Calculation Flow** | Guard Base → Organization Modifiers → Patrol Derivation → Custom Modifiers → Effects → Final Stats |
| **Permission Matrix** | GM has full CRUD, Players have read-all + limited modify |
| **Dialog Architecture** | Independent dialogs per entity type, all use DialogV2 |

---

## 📈 Development Phases

1. **🏗️ Foundation**: Basic entity models, CRUD operations, simple sync
2. **⚙️ Business Logic**: Stat calculations, effect application, validation
3. **🔄 Advanced Sync**: Conflict resolution, permissions, real-time updates
4. **🛠️ GM Tools**: Storage management, batch operations, templates
5. **✨ Polish**: Enhanced UI, performance, error handling

---

## 🤖 AI Assistant Guidelines

### 🎯 Core Focus Areas

1. **🏛️ Entity Hierarchy**: Always maintain Guard Organization → Patrols relationship
2. **🔒 Permission Awareness**: Respect GM vs Player access throughout
3. **🧪 TDD Discipline**: Write tests first for all functionality
4. **💬 DialogV2 Focus**: Use DialogV2.query for all user interactions
5. **⚡ Performance**: Cache derived calculations, batch sync updates
6. **🌐 Bilingual Support**: Support Daggerheart terminology in both languages
7. **🖱️ Drag & Drop**: Implement extensive drag & drop for intuitive UX

---

## 📊 Current Project State

- **🏗️ Foundation Phase**: Core CRUD operations and basic sync implemented
- **💻 UI**: DialogV2-based interface with tab structure planned

---

## 🐛 Debug and Testing

### 🔍 Common Debug Scenarios
- **Never create a debug tool javascript** - we will use the UI
- Test guard CRUD operations
- Simulate sync conflicts
- Test permission boundaries
- Validate stat calculations

### 🛠️ Debugging Tools & Procedures

#### Global Debug Access
When working with event handlers (like ReputationEventHandler), debug methods are automatically exposed to `window`:

```javascript
// Browser Console Commands
RepDebug.diagnose()    // Diagnose current elements
RepDebug.force()       // Force aggressive drag setup with visual indicators
RepDebug.test()        // Create test draggable elements
RepDebug.setup()       // Run normal setup
```

#### Drag & Drop Debugging Process
1. **🔍 Diagnose First**: Run `RepDebug.diagnose()` to inspect element properties
2. **💪 Force Setup**: Run `RepDebug.force()` for aggressive configuration with visual indicators
3. **👀 Visual Feedback**: Look for blue borders on draggable elements
4. **🎯 Drop Zone**: Check for fixed-position drop zone in top-right corner

#### CSS Conflict Resolution
- **Override user-select**: Set to 'none' for drag handles
- **Override pointer-events**: Ensure 'auto' for interactive elements
- **Check parent constraints**: Verify overflow, position, z-index don't block drag
- **Apply visual indicators**: Use border colors for debugging feedback

---

## 📝 Project Notes

> **Note**: This module is primarily for testing synchronization patterns in Foundry VTT. Focus on clear, well-tested code that demonstrates different sync scenarios rather than production features.
